// This file was generated by counterfeiter
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actors"
	"code.cloudfoundry.org/cli/api/cloudcontrollerv2"
	"code.cloudfoundry.org/cli/commands/v2"
)

type FakeUnbindServiceActor struct {
	GetAppStub        func(query []cloudcontrollerv2.Query) (actors.Application, error)
	getAppMutex       sync.RWMutex
	getAppArgsForCall []struct {
		query []cloudcontrollerv2.Query
	}
	getAppReturns struct {
		result1 actors.Application
		result2 error
	}
	GetServiceInstanceStub        func(query []cloudcontrollerv2.Query) (actors.ServiceInstance, error)
	getServiceInstanceMutex       sync.RWMutex
	getServiceInstanceArgsForCall []struct {
		query []cloudcontrollerv2.Query
	}
	getServiceInstanceReturns struct {
		result1 actors.ServiceInstance
		result2 error
	}
	GetServiceBindingStub        func(query []cloudcontrollerv2.Query) (actors.ServiceBinding, error)
	getServiceBindingMutex       sync.RWMutex
	getServiceBindingArgsForCall []struct {
		query []cloudcontrollerv2.Query
	}
	getServiceBindingReturns struct {
		result1 actors.ServiceBinding
		result2 error
	}
	UnbindServiceStub        func(serviceBindingGUID string) error
	unbindServiceMutex       sync.RWMutex
	unbindServiceArgsForCall []struct {
		serviceBindingGUID string
	}
	unbindServiceReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUnbindServiceActor) GetApp(query []cloudcontrollerv2.Query) (actors.Application, error) {
	var queryCopy []cloudcontrollerv2.Query
	if query != nil {
		queryCopy = make([]cloudcontrollerv2.Query, len(query))
		copy(queryCopy, query)
	}
	fake.getAppMutex.Lock()
	fake.getAppArgsForCall = append(fake.getAppArgsForCall, struct {
		query []cloudcontrollerv2.Query
	}{queryCopy})
	fake.recordInvocation("GetApp", []interface{}{queryCopy})
	fake.getAppMutex.Unlock()
	if fake.GetAppStub != nil {
		return fake.GetAppStub(query)
	} else {
		return fake.getAppReturns.result1, fake.getAppReturns.result2
	}
}

func (fake *FakeUnbindServiceActor) GetAppCallCount() int {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return len(fake.getAppArgsForCall)
}

func (fake *FakeUnbindServiceActor) GetAppArgsForCall(i int) []cloudcontrollerv2.Query {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return fake.getAppArgsForCall[i].query
}

func (fake *FakeUnbindServiceActor) GetAppReturns(result1 actors.Application, result2 error) {
	fake.GetAppStub = nil
	fake.getAppReturns = struct {
		result1 actors.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeUnbindServiceActor) GetServiceInstance(query []cloudcontrollerv2.Query) (actors.ServiceInstance, error) {
	var queryCopy []cloudcontrollerv2.Query
	if query != nil {
		queryCopy = make([]cloudcontrollerv2.Query, len(query))
		copy(queryCopy, query)
	}
	fake.getServiceInstanceMutex.Lock()
	fake.getServiceInstanceArgsForCall = append(fake.getServiceInstanceArgsForCall, struct {
		query []cloudcontrollerv2.Query
	}{queryCopy})
	fake.recordInvocation("GetServiceInstance", []interface{}{queryCopy})
	fake.getServiceInstanceMutex.Unlock()
	if fake.GetServiceInstanceStub != nil {
		return fake.GetServiceInstanceStub(query)
	} else {
		return fake.getServiceInstanceReturns.result1, fake.getServiceInstanceReturns.result2
	}
}

func (fake *FakeUnbindServiceActor) GetServiceInstanceCallCount() int {
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	return len(fake.getServiceInstanceArgsForCall)
}

func (fake *FakeUnbindServiceActor) GetServiceInstanceArgsForCall(i int) []cloudcontrollerv2.Query {
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	return fake.getServiceInstanceArgsForCall[i].query
}

func (fake *FakeUnbindServiceActor) GetServiceInstanceReturns(result1 actors.ServiceInstance, result2 error) {
	fake.GetServiceInstanceStub = nil
	fake.getServiceInstanceReturns = struct {
		result1 actors.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeUnbindServiceActor) GetServiceBinding(query []cloudcontrollerv2.Query) (actors.ServiceBinding, error) {
	var queryCopy []cloudcontrollerv2.Query
	if query != nil {
		queryCopy = make([]cloudcontrollerv2.Query, len(query))
		copy(queryCopy, query)
	}
	fake.getServiceBindingMutex.Lock()
	fake.getServiceBindingArgsForCall = append(fake.getServiceBindingArgsForCall, struct {
		query []cloudcontrollerv2.Query
	}{queryCopy})
	fake.recordInvocation("GetServiceBinding", []interface{}{queryCopy})
	fake.getServiceBindingMutex.Unlock()
	if fake.GetServiceBindingStub != nil {
		return fake.GetServiceBindingStub(query)
	} else {
		return fake.getServiceBindingReturns.result1, fake.getServiceBindingReturns.result2
	}
}

func (fake *FakeUnbindServiceActor) GetServiceBindingCallCount() int {
	fake.getServiceBindingMutex.RLock()
	defer fake.getServiceBindingMutex.RUnlock()
	return len(fake.getServiceBindingArgsForCall)
}

func (fake *FakeUnbindServiceActor) GetServiceBindingArgsForCall(i int) []cloudcontrollerv2.Query {
	fake.getServiceBindingMutex.RLock()
	defer fake.getServiceBindingMutex.RUnlock()
	return fake.getServiceBindingArgsForCall[i].query
}

func (fake *FakeUnbindServiceActor) GetServiceBindingReturns(result1 actors.ServiceBinding, result2 error) {
	fake.GetServiceBindingStub = nil
	fake.getServiceBindingReturns = struct {
		result1 actors.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeUnbindServiceActor) UnbindService(serviceBindingGUID string) error {
	fake.unbindServiceMutex.Lock()
	fake.unbindServiceArgsForCall = append(fake.unbindServiceArgsForCall, struct {
		serviceBindingGUID string
	}{serviceBindingGUID})
	fake.recordInvocation("UnbindService", []interface{}{serviceBindingGUID})
	fake.unbindServiceMutex.Unlock()
	if fake.UnbindServiceStub != nil {
		return fake.UnbindServiceStub(serviceBindingGUID)
	} else {
		return fake.unbindServiceReturns.result1
	}
}

func (fake *FakeUnbindServiceActor) UnbindServiceCallCount() int {
	fake.unbindServiceMutex.RLock()
	defer fake.unbindServiceMutex.RUnlock()
	return len(fake.unbindServiceArgsForCall)
}

func (fake *FakeUnbindServiceActor) UnbindServiceArgsForCall(i int) string {
	fake.unbindServiceMutex.RLock()
	defer fake.unbindServiceMutex.RUnlock()
	return fake.unbindServiceArgsForCall[i].serviceBindingGUID
}

func (fake *FakeUnbindServiceActor) UnbindServiceReturns(result1 error) {
	fake.UnbindServiceStub = nil
	fake.unbindServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUnbindServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	fake.getServiceBindingMutex.RLock()
	defer fake.getServiceBindingMutex.RUnlock()
	fake.unbindServiceMutex.RLock()
	defer fake.unbindServiceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeUnbindServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.UnbindServiceActor = new(FakeUnbindServiceActor)
